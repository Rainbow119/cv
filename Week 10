#include <iostream>
#include <cstdlib>
#include <cctype>
#include <vector>
using namespace std;

int digit_to_int(char c);

class Money{

public:
    Money(long dollars, int cents);
    Money(long dollars);
    Money();
    friend Money operator +(const Money& amount1, const Money& amount2); 
    friend Money operator -(const Money& amount1, const Money& amount2);
    friend Money operator -(const Money& amount1);
    friend ostream& operator <<(ostream& outs, const Money& amount1);
    friend istream& operator >>(istream& ins, Money& amount1);
    friend bool operator ==(const Money& amount1, const Money& amount2); 
    double get_value() const;
    void input(istream& ins);
    void output(ostream& outs) const;

private:
    long all_cents;
};

Money operator +(const Money& amount1, const Money& amount2){
    Money temp;
    temp.all_cents = amount1.all_cents+amount2.all_cents;
    return temp;
}

Money operator -(const Money& amount1, const Money& amount2){
    Money temp;
    temp.all_cents = amount1.all_cents-amount2.all_cents;
    return temp;
}

Money operator -(const Money& amount1){
    Money temp;
    temp.all_cents= -amount1.all_cents;
    return temp;
}

ostream& operator <<(ostream& outs, const Money& amount1){
    long positive_cents, dollars, cents;

    positive_cents = labs(amount1.all_cents);
    dollars = positive_cents / 100;
    cents = positive_cents % 100;
    if (amount1.all_cents < 0)
        outs << "-$" << dollars << '.';
    else
        outs << "$" << dollars << '.';
    if (cents < 10)
        outs << '0';
        outs << cents;

    return outs;
}
istream& operator >>(istream& ins, Money& amount1){

    long check_num;
    long dollars;
    char period,digit1,digit2,blank;
    int isCashed;

    cin>>dollars>>period>>digit1>>digit2;

    int cents = digit_to_int(digit1)*10+ digit_to_int(digit2);

    amount1.all_cents = dollars*100+ cents;

    return ins;
}

bool operator ==(const Money& amount1, const Money& amount2){
    return amount1.all_cents == amount2.all_cents;
}

Money::Money(long dollars, int cents){
    all_cents = dollars*100+cents;
}

Money::Money(long dollars){
    all_cents = dollars*100;
}
Money::Money(){
    all_cents=0;
}

double Money::get_value() const{
    return this->all_cents * 0.01;
}

int digit_to_int(char c)
{
    return (static_cast<int>(c) - static_cast<int>('0'));
}

class Check{
public:
    Check(int check_number, Money amount, bool isCashed);
    int get_checkNumber() const;
    Money get_amount() const;
    bool get_isCashed() const;
    friend ostream& operator <<(ostream& outs, const Check& check1);
    friend vector<int> FilterCashedCheck(vector<Check>& checks);
    friend vector<int> FilterUncashedCheck(vector<Check>& checks); 

private:
    int check_number;
    Money amount;
    bool isCashed;
};

Check::Check(int check_number, Money amount, bool isCashed){
    this->check_number = check_number;
    this->amount = amount;
    this->isCashed = isCashed;
}

ostream& operator <<(ostream& outs, const Check& check1){
    outs<<"Check number: "<<check1.get_checkNumber()
    <<" with amount: "<<check1.get_amount();

    return outs;
}

vector<int> FilterCashedCheck(vector<Check>& checks){
    vector<int> cashedCheckIndex;
    for(int i=0;i<checks.size();i++){
        if(checks[i].get_isCashed())
            cashedCheckIndex.push_back(i);
    }
    return cashedCheckIndex;
}

vector<int> FilterUncashedCheck(vector<Check>& checks){
    vector<int> uncashedCheckIndex;
    for(int i=0;i<checks.size();i++){
        if(!checks[i].get_isCashed())
            uncashedCheckIndex.push_back(i);
    }
    return uncashedCheckIndex;
}

Money Check::get_amount() const{
    return amount;
}

bool Check::get_isCashed() const{
    return isCashed;
}

int Check::get_checkNumber() const{
    return this->check_number;
}


int main(){
    vector<Check> checks;

    cout<<"Please enter the check number, the amount on check and whether or not the check has been cashed(if yes, type 1 or if no, type 0): " << endl;
    cout<<"To end input, enter 0 0.00 0" << endl;
    bool stop=false;
    while(!stop){
        long check_num;
        long dollars;
        char period, digit1, digit2, blank;
        int isCashed;

        cin >> check_num >> dollars >> period >> digit1 >> digit2 >> isCashed;

        if(check_num==0 && dollars==0 && digit1=='0' && digit2=='0'){
            stop = true;
            continue;
        }

        int cents = digit_to_int(digit1)*10+ digit_to_int(digit2);
        Money mon(dollars,cents);        
        
        Check temp(check_num, mon, isCashed==1);
        checks.push_back(temp);
    }

    vector<int> cashedCheckIndex = FilterCashedCheck(checks);
    vector<int> uncashedCheckIndex = FilterUncashedCheck(checks);
    Money sumOfCashedChecks;
    Money sumOfUncashedChecks;

    for(int i=0;i<cashedCheckIndex.size();i++){
        sumOfCashedChecks = sumOfCashedChecks + checks[cashedCheckIndex[i]].get_amount();
    }

    for(int i=0;i<uncashedCheckIndex.size();i++){
        sumOfUncashedChecks = sumOfUncashedChecks + checks[uncashedCheckIndex[i]].get_amount();
    }
    cout<<"The sum of the cashed checks is:\n"<<sumOfCashedChecks<<endl;
    cout<<"The sum of un-cashed checks is:\n"<<sumOfUncashedChecks<<endl;

    cout<<"Please enter the deposits (end deposit input by typing -1):\n";
    bool stopDepositInput =false;
    vector<Money> deposits;

    while(!stopDepositInput){
        long dollars;
        char digit1,digit2,period;
        cin>>dollars;
        if(dollars==-1){
            stopDepositInput=true;
            continue;
        }

        cin>>period>>digit1>>digit2;
        int cents = digit_to_int(digit1)*10+ digit_to_int(digit2);
        Money mon(dollars,cents);   

        deposits.push_back(mon);     
    }
    cout<<"The sum of the deposits is:\n";
    Money totalDeposit;
    for(int i=0;i<deposits.size();i++){
        totalDeposit=totalDeposit +deposits[i];
    }
    cout<<totalDeposit<<endl;
    
    cout<<"Please enter the prior balance amount:\n";
    Money priorBalance;
    cin>>priorBalance;
    cout<<"Please enter the new balance amount according to account holder:\n";
    Money newBalance;
    cin>>newBalance;
    cout<<endl;

    Money balanceIncludingChecks = -sumOfCashedChecks+totalDeposit+priorBalance;
    cout<<"The balance according to the bank which includes only cleared checks is: "<<balanceIncludingChecks<<endl;
    cout<<"The difference between the account holders balance of "<<newBalance
    <<" and the bank balance of "<<balanceIncludingChecks<<" is : "<<balanceIncludingChecks-newBalance<<endl;
    
    cout<<endl;

    cout<<"The cashed checks are:\n";
    for(int i=0;i<cashedCheckIndex.size();i++){
        cout<<checks[cashedCheckIndex[i]]<<endl;
    }

    cout<<endl;

    cout<<"The un-cashed checks are:\n";
    for(int i=0;i<uncashedCheckIndex.size();i++){
        cout<<checks[uncashedCheckIndex[i]]<<endl;
    }

    return 0;
}
